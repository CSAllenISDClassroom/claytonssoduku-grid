import Foundation
import Curses

// Define interrupt handler to terminate Curses with CTRL-C
class Handler : CursesHandlerProtocol {
    func interruptHandler() {
        screen.shutDown()
        print("Good bye!")
        exit(0)
    }
    
    func windowChangedHandler() {
    }
}


// Start up Curses
let screen = Screen.shared
screen.startUp(handler:Handler())
let mainWindow = screen.window
let size = mainWindow.size

// Move the cursor to an absolute position
let cursor = mainWindow.cursor
cursor.position = Point(x:20, y:20)

//Color set up

let colors = Colors.shared
precondition(colors.areSupported, "This terminal doesn't support colors.")
colors.startUp()
let red = Color.standard(.red)
let white = Color.standard(.white)
let redOnWhite = colors.newPair(foreground:red, background:white)
let cyan = Color.standard(.cyan)
let black = Color.standard(.black)
let cyanOnBlack = colors.newPair(foreground:black, background:cyan)

//Functions

//Writes box lines for the amount of times you specify
func boxLines(Number:Int, X:Int, Y:Int) {
    mainWindow.cursor.position = Point(x:X, y:Y)
    for _  in 1 ... Number {
    mainWindow.write("─")
    }
}

//Writes the "Half T" pretaining to the begining left side of a grid
func leftSideofGrid(Number:Int, X:Int, Y:Int) {
    var Y = Y
    for _  in 1 ... Number {
        mainWindow.cursor.position = Point(x:X, y:Y)
        mainWindow.write("├")
        Y = Y + 1
    }
}

func linesDown(Number:Int, X:Int, Y:Int) {
    var Y = Y
    for _  in 1 ... Number {
        mainWindow.cursor.position = Point(x:X, y:Y)
        mainWindow.write("│")
        Y = Y + 1
    }
}

func boxPlusCharacter(Number:Int, X:Int, Y:Int) {
    var Y = Y
    for _  in 1 ... Number {
        mainWindow.cursor.position = Point(x:X, y:Y)
        mainWindow.write("┼")
        Y = Y + 1
    }
}

//var scale = 6
//Function used to create boxes without cliping, it must however be used incomplete.

// Temporarily move the cursor to a new position
cursor.pushPosition(newPosition:Point(x:0, y:0))
mainWindow.write("Cursor is at: \(cursor.position)")
cursor.popPosition()

//Code here
leftSideofGrid(Number:5, X:25, Y:20) 
boxLines(Number:5, X:26, Y:20)
linesDown(Number:10, X:30, Y:20) 




//End code
mainWindow.turnOff(redOnWhite)

mainWindow.refresh()

let keyboard = Keyboard.shared

/*while true {
    let key = keyboard.getKey(window:mainWindow)
    mainWindow.clearToEndOfLine()
    mainWindow.refresh()
    mainWindow.clear()

    for i in 0 ... 2 {
    for j in 0 ... 2 {
        threeByThree(X:size.width/2 + i * (scale*3+2), Y:10 + j * 7)
    }
}
    switch (key.keyType) {
    case .arrowDown: scale = scale - 1
        case .arrowUp: scale = scale + 1
                       default: scale = scale + 0 
    }
    if scale == 2 {
        scale = 3
    }
    
    
}
*/
 
// Wait forever, or until the user presses CTRL-C
screen.wait()
